{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport rootReducer from './root-reducer';\nimport { persistStore } from 'redux-persist';\nconst middlewares = [];\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\nexport const persistor = persistStore(store); // import React from 'react';\n// import { Route, Switch, Redirect } from 'react-router-dom';\n// import './App.css';\n// import HomePage from './pages/homepage/homepage';\n// import ShopPage from './pages/shop/shop';\n// import CheckoutPage from './pages/checkout/checkout';\n// import Header from './components/header/header';\n// import SignInAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up';\n// import { auth, createUserProfileDocument } from './firebase/firebase.utils';\n// import { connect } from 'react-redux';\n// import { setCurrentUser } from './redux/user/user.actions';\n// import { selectCurrentUser } from './redux/user/user.selectors';\n// import { createStructuredSelector } from 'reselect';\n// class App extends React.Component {\n//   unsubscribeFromAuth = null\n//   componentDidMount() {\n//     const { setCurrentUser } = this.props \n//     this.unsubscribeFromAuth = auth.onAuthStateChanged(async (userAuth) => {\n//       if(userAuth) {\n//           const userRef = await createUserProfileDocument(userAuth)\n//           userRef.onSnapshot(snapshot => {\n//             setCurrentUser({\n//               id: snapshot.id,\n//               ...snapshot.data()\n//             })\n//           }) \n//       } else {\n//         setCurrentUser(userAuth)\n//       }\n//     })\n//   }\n//   componentWillUnmount() {\n//     this.unsubscribeFromAuth()\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <Header />\n//         <Switch>\n//           <Route exact path=\"/\" component={HomePage} />\n//           <Route path=\"/shop\" component={ShopPage} />\n//           <Route exact path=\"/checkout\" component={CheckoutPage} />\n//           <Route exact path=\"/signin\" render={() => this.props.currentUser ? (<Redirect to=\"/\" />) : (<SignInAndSignUpPage />) } />\n//         </Switch>\n//       </div>\n//     );\n//   }\n// }\n// const mapStateToProps = createStructuredSelector({\n//   currentUser: selectCurrentUser\n// })\n// const mapDispatchToProps = (dispatch) => ({\n//     setCurrentUser: user => dispatch(setCurrentUser(user))\n// })\n// export default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/vajihahmed/Desktop/crafty/src/redux/store.js"],"names":["createStore","applyMiddleware","logger","rootReducer","persistStore","middlewares","process","env","NODE_ENV","push","store","persistor"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,YAAT,QAA6B,eAA7B;AAEA,MAAMC,WAAW,GAAG,EAApB;;AAEA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AACxCH,EAAAA,WAAW,CAACI,IAAZ,CAAiBP,MAAjB;AACH;;AAED,OAAO,MAAMQ,KAAK,GAAGV,WAAW,CAACG,WAAD,EAAcF,eAAe,CAAC,GAAGI,WAAJ,CAA7B,CAAzB;AAEP,OAAO,MAAMM,SAAS,GAAGP,YAAY,CAACM,KAAD,CAA9B,C,CAMP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport rootReducer from './root-reducer';\nimport { persistStore } from 'redux-persist';\n\nconst middlewares = [];\n\nif (process.env.NODE_ENV === 'development') {\n    middlewares.push(logger)\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nexport const persistor = persistStore(store);\n\n\n\n\n\n// import React from 'react';\n// import { Route, Switch, Redirect } from 'react-router-dom';\n// import './App.css';\n// import HomePage from './pages/homepage/homepage';\n// import ShopPage from './pages/shop/shop';\n// import CheckoutPage from './pages/checkout/checkout';\n// import Header from './components/header/header';\n// import SignInAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up';\n// import { auth, createUserProfileDocument } from './firebase/firebase.utils';\n// import { connect } from 'react-redux';\n// import { setCurrentUser } from './redux/user/user.actions';\n// import { selectCurrentUser } from './redux/user/user.selectors';\n// import { createStructuredSelector } from 'reselect';\n\n\n// class App extends React.Component {\n\n//   unsubscribeFromAuth = null\n\n//   componentDidMount() {\n\n//     const { setCurrentUser } = this.props \n\n//     this.unsubscribeFromAuth = auth.onAuthStateChanged(async (userAuth) => {\n//       if(userAuth) {\n//           const userRef = await createUserProfileDocument(userAuth)\n\n//           userRef.onSnapshot(snapshot => {\n//             setCurrentUser({\n//               id: snapshot.id,\n//               ...snapshot.data()\n//             })\n//           }) \n//       } else {\n//         setCurrentUser(userAuth)\n//       }\n//     })\n//   }\n\n//   componentWillUnmount() {\n//     this.unsubscribeFromAuth()\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <Header />\n//         <Switch>\n//           <Route exact path=\"/\" component={HomePage} />\n//           <Route path=\"/shop\" component={ShopPage} />\n//           <Route exact path=\"/checkout\" component={CheckoutPage} />\n//           <Route exact path=\"/signin\" render={() => this.props.currentUser ? (<Redirect to=\"/\" />) : (<SignInAndSignUpPage />) } />\n//         </Switch>\n//       </div>\n//     );\n//   }\n// }\n\n// const mapStateToProps = createStructuredSelector({\n//   currentUser: selectCurrentUser\n// })\n\n// const mapDispatchToProps = (dispatch) => ({\n//     setCurrentUser: user => dispatch(setCurrentUser(user))\n// })\n\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}